---
- name: Create an empty VirtualBox VM for a Kickstart and capture the MAC address
  hosts: all
  become: true
  gather_facts: false
  tasks:
    - name: Create a new Vbox image from template for kickstart
      command: "vboxmanage clonevm {{ vbox_template }} --mode machine --name {{ inventory_hostname | regex_replace('\\..*$', '') }} --groups '{{ vbox_group }}' --register"
      delegate_to: "{{ vbox_host }}"
      become_user: "{{ vbox_remote_user }}" 
      register: vbox_createvm
      failed_when: vbox_createvm.rc != 0

    - name: Extract the mac address for the new VM to store in a local fact
      shell: |
        /usr/bin/vboxmanage showvminfo --machinereadable {{ inventory_hostname | regex_replace('\..*$', '') }} | grep macaddress1 | sed -e 's/.*=\"//' -e 's/\".*$//'
      delegate_to: "{{ vbox_host }}"
      become_user: "{{ vbox_remote_user }}" 
      register: vbox_mac_query
      failed_when: vbox_mac_query.rc != 0

    - name: Debug - display output from vboxmanage showvminfo
      debug:
        var: vbox_mac_query
      delegate_to: localhost

    - name: Store the MAC address as a local fact for the new VM
      set_fact:
        vbox_mac: "{{ vbox_mac_query.stdout }}"
        cacheable: yes
      delegate_to: localhost


- name: Display the MAC address of the new VM
  hosts: all
  gather_facts: false
  tasks:
    - name: Print out the output from the snapshot
      debug:
        var: hostvars[inventory_hostname].ansible_facts.vbox_mac
      delegate_to: localhost


- name: Create a new host in Satellite for provisioning
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Create a new host in Satellite that is ready for provisioning
      command: |
        /usr/bin/hammer host create --name {{ inventory_hostname | regex_replace('\..*$', '') }} --organization {{ sat_org }} --location {{ sat_loc }} --hostgroup-title {{ sat_hg_title }} --mac {{ hostvars[inventory_hostname].ansible_facts.vbox_mac }} --build True --managed True
      delegate_to: "{{ sat_host }}"
      register: hammer_host_create
      failed_when: hammer_host_create.rc != 0

    - name: Capture the assigned IP address and store as a fact
      shell: |
        /usr/bin/hammer host info --name {{ inventory_hostname }} --organization {{ sat_org }} --fields "{{ hammer_ip_fields }}" | sed -e 1d -e "s/.*address: //"
      delegate_to: "{{ sat_host }}"
      register: hammer_ip_query
      failed_when: hammer_ip_query.rc != 0

    - name: Store the IP address as a local fact for the new VM
      set_fact:
        os_ipv4_addr: "{{ hammer_ip_query.stdout }}"
        cacheable: yes
      delegate_to: localhost

    - name: Display IP address
      debug:
        #var: hostvars[inventory_hostname].ansible_facts.os_ipv4_addr
        var: os_ipv4_addr
      delegate_to: localhost  


- name: Inject IP Addr in IDM/DNS
  hosts: all
  gather_facts: false
  become: true
  tasks:
    - name: Compute Short Hostname for debugging
      debug:
        msg: "{{ inventory_hostname.split('.')[0] }}"
    - name:  Add DNS A record
      ipa_dnsrecord:
        record_name: "{{ inventory_hostname.split('.')[0] }}"
        record_type: A
        record_value: "{{ ansible_default_ipv4.address }}"
        zone_name: "{{ inventory_hostname.split('.')[1:4] | join('.') }}"
        ipa_host: idm.idm.scdlabs.com
        ipa_pass: "{{ adjoin_admin_password }}"
        state: present
      delegate_to: idm.idm.scdlabs.com

  
- name: Power on the VM to initiate the Kickstart
  hosts: all
  gather_facts: false
  become: false
  tasks: 
    - name: Power-on the VM for {{ inventory_hostname }} to initiate the Kickstart from Satellite 6
      command: |
        vboxmanage startvm {{ inventory_hostname | regex_replace('\..*$', '') }}
      delegate_to: "{{ vbox_host }}"
      remote_user: "{{ vbox_remote_user }}" 
      register: vbox_startvm
      failed_when: vbox_startvm.rc != 0

...